<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Trendify</title>
    <link rel="stylesheet" href="/styles/style.css" />
    <link rel="stylesheet" href="/styles/AllCards.css" />
    <link rel="stylesheet" href="/styles/effects.css" />
    <link rel="stylesheet" href="/styles/price.css" />
   
    <link rel="icon" href="E-Commerce-logo.jpeg" type="image/x-icon" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <style>
      .AllCardTitle a {
        display: -webkit-box;
        -webkit-line-clamp: 2; /* Restrict to 2 lines */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: normal;
        font-size: 16px;
        font-weight: bold;
        font-family: Arial, Helvetica, sans-serif;
        color: black;
        line-height: 1.4;
        max-height: 2.8em; /* Adjusted based on line-height */
        text-decoration: none;
      }
      /* Custom Scrollbar (Optional) */
  .filter-scrollable {
    max-height: 90vh;          /* Keeps it within viewport height */
    overflow-y: auto;
    display: flex;
    flex-direction: column-reverse; /* Scroll from bottom to top */
    scrollbar-width: thin;
  }

  @media (max-width: 768px) {
    #filterSidebar {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100vh;
      z-index: 9999;
      background: white;
      overflow-y: auto;
      padding: 1rem;
    }
  }
    </style>
  </head>
  <body style="background-color: seashell" >
    <!-- Navbar 1 -->
  <nav class="navbar navbar-expand-lg" id="navbar1" style=" background-color:rgb(209, 168, 123);
  ">
      <div class="container-fluid">
        <a class="navbar-brand" href="#" style="color: white" id="navbarBrand">
          <img id="title" src="Title1.png" alt="" style="height:30px; width:100px;" />
        </a>
      
        
        <form id="SearchForm" class="d-flex mx-auto" role="search" action="/search" method="GET">
          <input type="text" name="q" required class="form-control" type="search" placeholder="Search" aria-label="Search"
            style="background-color: white" id="searchInput" />
          <button class="btn btn-outline-dark" type="submit" style="
                    background-color: rgb(240, 240, 240);
                    padding: 0px;
                    width: 40px;
                  " id="searchButton">
            <img src="https://static.vecteezy.com/system/resources/previews/016/716/177/original/search-3d-icon-png.png"
              style="
                      object-fit: cover;
                      width: 20px;
                      height: 20px;
                      margin: 0px;
                      padding: 0px;
                    " />
          </button>
        </form>
      </div>
    </nav>
  
    <nav class="navbar navbar-expand-lg" style="background-color:rgb(255, 209, 176)" id="navbar2">
  
  
      <ul class="navbar-nav" style="display: flex; flex-direction: row; align-items: center;">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="/home" style="color:Black">
            <img src="Home.png" style="object-fit: contain; width: 30px; height: 30px;">
          </a>
        </li>
      
        <li class="nav-item" id="nav-cart">
          <a class="nav-link active" aria-current="page" href="/cart" style="color: black; position: relative;">
            <img src="cart.png" style="object-fit: contain; width:30px; height: 30px;">
            <span class="cart-text">Cart</span>
            <span id="cart-count" 
      style="position: absolute; top: 0px; right: 0px; background: red; color: white; border-radius: 50%; padding: 2px 6px; font-size: 12px; display: none;">
</span>

          </a>
        </li>
        
      
        <li class="nav-item" id="nav-orders">
          <a class="nav-link active" aria-current="page" href="/my-orders" style="color:black">
            <img src="Order.png"
            style="object-fit: contain; width: 30px; height: 30px;">
            <span class="cart-text">Orders</span>
          </a>
        </li>
        
       
      
        <li class="nav-item" id="SearchIcon">
          <a class="nav-link active" aria-current="page" href="/SearchProduct" style="color:black">
            <img src="Search.png"
            style="object-fit: contain; width: 30px; height: 30px;">
          </a>
        </li>
        <li class="nav-item" >
          <button  class="btn" id="filterBtn">Filter</button>
        </li>
      </ul>
      
      <div class="d-flex justify-content-end" style="position: fixed; right: 0;">
        <div class="dropdown">
          <button class="d-flex align-items-center justify-content-center"
          id="Log_Button" type="button" data-bs-toggle="dropdown"
          aria-expanded="false" 
          style="background-color: white; width: 40px; height: 40px; border-radius: 50%; overflow: hidden; padding: 0; border: none;">
      <% if (username) { %>
          <span style="font-size: 18px; font-weight: bold; color: black;">
              <%= username.charAt(0).toUpperCase() %>
          </span>
      <% } else { %>
          <img id="Log_Buttonimage"
              src="https://static.vecteezy.com/system/resources/previews/000/550/731/original/user-icon-vector.jpg"
              alt="User Icon"
              style="width: 100%; height: 100%; object-fit: cover;" />
      <% } %>
  </button>
  
          <ul class="dropdown-menu dropdown-menu-end" style="background-color: rgb(226, 226, 226)">
            <li class="nav-item" style="margin-top: 15px">
              <a class="nav-link" href="/signup" style="
                    color: black;
                    text-align: center;
                    font-size: 20px;
                    font-weight: bolder;
                  ">Signup</a>
            </li>
            <li class="nav-item" style="margin-top: 15px">
              <a class="nav-link" href="/login" style="
                    color: black;
                    text-align: center;
                    font-size: 20px;
                    font-weight: bolder;
                  ">Login</a>
            </li>
            <li class="nav-item" style="margin-top: 15px; margin-bottom: 15px">
              <a class="nav-link" href="/logout" style="
                    color: black;
                    text-align: center;
                    font-size: 20px;
                    font-weight: bolder;
                  ">Logout</a>
            </li>
            <li class="nav-item" style="margin-top: 15px; margin-bottom: 15px">
              <a class="nav-link" href="/admin-Form" style="
                    color: black;
                    text-align: center;
                    font-size: 20px;
                    font-weight: bolder;
                  ">Admin</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>
    <!-- FILTER SIDEBAR -->
<div id="filterSidebar" class="filter-sidebar bg-light p-3 rounded shadow filter-scrollable">
  <h4 class="font-weight-bold">Filters</h4>

  <!-- Category Filter -->
  <div class="category-filter">
    <h5 class="font-weight-semibold">Categories</h5>
    <ul id="categoryFilter" class="list-unstyled">
      <% validCategories.forEach(category => { %>
        <li>
          <input type="checkbox" class="category-checkbox" data-category="<%= category %>">
          <label><%= category.charAt(0).toUpperCase() + category.slice(1) %></label>
        </li>
      <% }); %>
    </ul>
  </div>

  <!-- Price Filter -->
  <div class="price-filter mt-3">
    <h5 class="font-weight-semibold">Price Range</h5>
    <input type="range" class="form-control-range" id="priceRange" min="0" max="10000" step="100">
    <span id="priceLabel">Max Price: â‚¹10000</span>
  </div>

  <!-- Rating Filter -->
  <div class="rating-filter mt-3">
    <h5 class="font-weight-semibold">Rating</h5>
    <ul class="list-unstyled">
      <% for (let i = 5; i >= 1; i--) { %>
        <li>
          <input type="radio" name="rating" value="<%= i %>"> 
          <%= i %> star<%= i > 1 ? 's' : '' %> & up
        </li>
      <% } %>
    </ul>
  </div>

  <!-- Sorting -->
  <div class="sort-filter mt-3">
    <h5 class="font-weight-semibold">Sort By</h5>
    <select id="sortSelect" class="form-control">
      <option value="">Default</option>
      <option value="price-asc">Price: Low to High</option>
      <option value="price-desc">Price: High to Low</option>
      <option value="rating-desc">Rating: High to Low</option>
    </select>
  </div>

  <!-- Buttons -->
  <div class="mt-4">
    <button class="btn btn-primary" id="applyFilters">Apply Filters</button>
    <button class="btn btn-secondary ml-2" id="resetFilters">Reset</button>
    <p class="mt-2" id="resultsCount"></p>
  </div>
</div>
    

  
    <div class="container-fluid p-2" id="allCardsContainer">
      <div class="row m-0">
        <% products.forEach(product => { %>
          <div class="card" id="AProduct_card" 
               data-category="<%= product.category %>" 
               data-price="<%= product.price %>" 
               data-rating="<%= product.rating %>">
            
            <!-- Image with Fixes -->
            <img src="<%= product.imageUrl %>?v=<%= Date.now() %>" 
                 class="card-img-top product-img" 
                 alt="<%= product.title %>" 
                 loading="eager"
                 onerror="this.onerror=null; this.src='/images/default.jpg';" />
            
            <div class="card-body" id="AllCardsBody">
              
              <h3 class="card-title AllCardTitle" >
                <a href="/product/<%= product._id %>">
                  <%= product.title %>
                </a>
              </h3>
    
              <!-- Price Information -->
              <div class="deal-card" data-price="<%= product.price %>" style="margin-top: 10px; margin-bottom: 10px;">
                <div class="price-container">
                  <span class="discount discount-percentage"></span>
                  <span  class="final-price"></span>
                  <span  class="original-price"></span>
                </div>
              </div>
              <% if (product.reviews.length > 0) { %>
                <% 
                  // Find the best review (highest rating)
                  let bestReview = product.reviews.reduce((best, review) => 
                    review.rating > best.rating ? review : best, product.reviews[0]
                  );
                %>
              
                
                 
                  
                  <!-- Display only stars -->
                  <p id="indexrating">
                    <strong>Rating:</strong>
                    <% for (let i = 1; i <= 5; i++) { %>
                      <% if (i <= bestReview.rating) { %>
                        <i class="fas fa-star star-small " style="color: gold;"></i> <!-- Filled star -->
                      <% } else { %>
                        <i class="far fa-star star-small" style="color: lightgray;"></i> <!-- Empty star -->
                      <% } %>
                    <% } %>
                  </p>
                  
                  
                
               
              
              <% } else { %>
                <p>No reviews yet</p>
              <% } %>
              <!-- Add to Cart Button -->
              <button class="btn btn-primary add-to-cart-btn" data-product-id="<%= product._id %>">
                Add to Cart
              </button>
            </div>
          </div>
        <% }); %>
      </div>
    </div>
    <div id="loader" style="text-align:center; padding: 20px; display: none;">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
    </div>
    



  




    














    <div style="height: 500px"></div>
    <script>
      let page = 1;
      const limit = 30;
      let loading = false;
    
      async function loadMoreProducts() {
        if (loading) return;
        loading = true;
        document.getElementById('loader').style.display = 'block';
    
        try {
          const res = await fetch(`/products?page=${++page}&limit=${limit}`);
          const newProducts = await res.json();
    
          const container = document.querySelector('#allCardsContainer .row');
    
          newProducts.forEach(product => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.setAttribute('data-category', product.category);
            card.setAttribute('data-price', product.price);
            card.setAttribute('data-rating', product.rating);
    
            card.innerHTML = `
              <img src="${product.imageUrl}?v=${Date.now()}" class="card-img-top product-img"
                alt="${product.title}" onerror="this.src='/images/default.jpg'" />
              <div class="card-body">
                <h3 class="card-title">
                  <a href="/product/${product._id}">${product.title}</a>
                </h3>
                <p><strong>Price:</strong> â‚¹${product.price}</p>
                <p><strong>Rating:</strong> ${product.rating}</p>
                <button class="btn btn-primary add-to-cart-btn" data-product-id="${product._id}">
                  Add to Cart
                </button>
              </div>
            `;
    
            container.appendChild(card);
          });
    
          if (newProducts.length < limit) {
            // All products loaded
            window.removeEventListener('scroll', handleScroll);
          }
        } catch (err) {
          console.error('Error loading products:', err);
        } finally {
          loading = false;
          document.getElementById('loader').style.display = 'none';
        }
      }
    
      function handleScroll() {
        const scrollTop = window.scrollY;
        const windowHeight = window.innerHeight;
        const documentHeight = document.body.offsetHeight;
    
        if (scrollTop + windowHeight >= documentHeight - 100) {
          loadMoreProducts();
        }
      }
    
      window.addEventListener('scroll', handleScroll);
    </script>
    
    <!-- JavaScript to Handle Add to Cart -->
    <script>
      window.onload = function () {
      document.querySelectorAll('.product-img').forEach(img => {
          if (!img.complete || img.naturalHeight === 0) {
              img.src = img.src; // Force reload broken images
          }
      });
  }; 

      async function addToCart(productId) {
        try {
          const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId, quantity: 1 })
          });
    
          const data = await response.json();
          if (data.success) {
            alert('Product added to cart!');
          } else {
            alert(data.message || 'Failed to add product to cart.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while adding the product to the cart.');
        }
      }
    
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
          button.addEventListener('click', () => {
            const productId = button.getAttribute('data-product-id');
            addToCart(productId);
          });
        });
      });
    </script>
     <script>
   
   document.addEventListener("DOMContentLoaded", function () {
    let productCards = document.querySelectorAll(".deal-card");
    let today = new Date();
    let daySeed = today.getDate(); // Use the date to change discounts daily

    productCards.forEach((card, index) => {
        let actualPrice = parseFloat(card.getAttribute("data-price"));

        if (!isNaN(actualPrice) && actualPrice > 0) {
            // Generate a unique discount for each product (changes daily)
            let baseDiscount = (index * 7 + daySeed) % 31 + 10; // Generates 10% - 40%
            let discountPercentage = Math.min(Math.max(baseDiscount, 10), 40); // Ensure it's within bounds

            // Generate fake original price variation based on actual price
            let priceVariation = actualPrice >= 1000
                ? Math.floor(Math.random() * (200 - 50 + 1)) + 50  // â‚¹50 - â‚¹200 for 1000+
                : actualPrice >= 100
                    ? Math.floor(Math.random() * (20 - 5 + 1)) + 5  // â‚¹5 - â‚¹20 for 100 - 999
                    : Math.floor(Math.random() * (5 - 1 + 1)) + 1;  // â‚¹1 - â‚¹5 for < 100

            let updatedPrice = actualPrice + priceVariation;

            // Generate fake original price (inflated)
            let fakeIncreasePercentage = Math.floor(Math.random() * (30 - 10 + 1)) + 10; // 10% - 30%
            let increasedPrice = Math.round(updatedPrice * (1 + fakeIncreasePercentage / 100));

            // Format price display
            let formatPrice = (price) => `â‚¹${price.toFixed(2)}`;

            // Ensure all elements exist before updating
            let originalPriceEl = card.querySelector(".original-price");
            let discountEl = card.querySelector(".discount-percentage");
            let finalPriceEl = card.querySelector(".final-price");

            if (originalPriceEl && discountEl && finalPriceEl) {
                originalPriceEl.innerText = formatPrice(increasedPrice);
                discountEl.innerText = `-${discountPercentage}%`;
                finalPriceEl.innerText = formatPrice(actualPrice);
            } else {
                console.error("Missing elements inside deal-card:", card);
            }
        } else {
            console.error("Invalid product price:", actualPrice);
        }
    });
});

</script>
    
    <script>
    // Get references to elements
const filterSidebar = document.getElementById('filterSidebar');
const filterBtn = document.getElementById('filterBtn');

// Open sidebar when the filter button is clicked
filterBtn.addEventListener('click', () => {
  filterSidebar.classList.toggle('open');
  filterSidebar.style.display = 'block'; // Make sure it's visible when toggled open
});

// Close sidebar when clicking outside of it
document.addEventListener('click', (event) => {
  // If the click is outside the sidebar and the filter button, close the sidebar
  if (!filterSidebar.contains(event.target) && event.target !== filterBtn) {
    filterSidebar.classList.remove('open');
    filterSidebar.style.display = 'none'; // Hide sidebar again
  }
});

      </script>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
    const priceRange = document.getElementById('priceRange');
    const priceLabel = document.getElementById('priceLabel');
    const ratingRadios = document.querySelectorAll('input[name="rating"]');
    const searchInput = document.getElementById('searchInput');
    const sortSelect = document.getElementById('sortSelect');
    const resultsCount = document.getElementById('resultsCount');
    const rowContainer = document.querySelector('#allCardsContainer .row');

    priceRange.addEventListener('input', () => {
      priceLabel.textContent = `Max Price: â‚¹${priceRange.value}`;
    });

    document.getElementById('applyFilters').addEventListener('click', filterProducts);
    document.getElementById('resetFilters').addEventListener('click', () => {
      categoryCheckboxes.forEach(cb => cb.checked = false);
      ratingRadios.forEach(rb => rb.checked = false);
      priceRange.value = 10000;
      priceLabel.textContent = "Max Price: â‚¹10000";
      searchInput.value = "";
      sortSelect.value = "";
      filterProducts();
    });

    async function filterProducts() {
      const selectedCategories = Array.from(categoryCheckboxes)
        .filter(cb => cb.checked)
        .map(cb => cb.getAttribute('data-category'));

      const selectedPrice = parseFloat(priceRange.value);
      const selectedRating = Array.from(ratingRadios)
        .filter(r => r.checked)
        .map(r => parseInt(r.value))[0] || "";

      const keyword = searchInput.value.trim().toLowerCase();
      const sortValue = sortSelect.value;

      const queryParams = new URLSearchParams();
      if (selectedCategories.length === 1) queryParams.append("category", selectedCategories[0]);
      if (selectedPrice) queryParams.append("maxPrice", selectedPrice);
      if (selectedRating) queryParams.append("minRating", selectedRating);
      if (keyword) queryParams.append("search", keyword);
      if (sortValue) queryParams.append("sort", sortValue);

      try {
        const res = await fetch(`/api/products?${queryParams.toString()}`);
        const products = await res.json();
        rowContainer.innerHTML = "";
        let visibleCount = 0;

        products.forEach(product => {
          const bestReview = getBestReview(product.reviews);
          const avgRating = bestReview ? bestReview.rating : 0;
          const originalPrice = product.originalPrice || Math.round(product.price * 1.2);
          const discountPercentage = Math.round(((originalPrice - product.price) / originalPrice) * 100);

          const productHTML = `
            <div class="card" id="AProduct_card" 
                 data-category="${product.category}" 
                 data-price="${product.price}" 
                 data-rating="${avgRating}">
              <img src="${product.imageUrl}?v=${Date.now()}" 
                   class="card-img-top product-img" 
                   alt="${product.title}" 
                   loading="eager" 
                   onerror="this.onerror=null; this.src='/images/default.jpg';" />
              <div class="card-body" id="AllCardsBody">
                <h3 class="card-title AllCardTitle">
                  <a href="/product/${product._id}">
                    ${product.title}
                  </a>
                </h3>

                <div class="deal-card" data-price="${product.price}" style="margin-top: 10px; margin-bottom: 10px;">
                  <div class="price-container">
                    <span class="discount discount-percentage">${discountPercentage}% off</span>
                    <span class="final-price" style="font-weight: bold;">â‚¹${product.price}</span>
                    <span class="original-price" style="text-decoration: line-through; color: gray;">â‚¹${originalPrice}</span>
                  </div>
                </div>

                ${
                  product.reviews.length > 0 
                  ? `<p id="indexrating"><strong>Rating:</strong> ${getStarHTML(avgRating)}</p>` 
                  : `<p>No reviews yet</p>`
                }

                <button class="btn btn-primary add-to-cart-btn" data-product-id="${product._id}">
                  Add to Cart
                </button>
              </div>
            </div>
          `;

          rowContainer.insertAdjacentHTML('beforeend', productHTML);
          visibleCount++;
        });

        resultsCount.textContent = `${visibleCount} product${visibleCount !== 1 ? 's' : ''} found`;

        // Re-bind Add to Cart button click after DOM update
        bindAddToCartButtons();
      } catch (err) {
        console.error("Error fetching filtered products:", err);
        resultsCount.textContent = "Error loading products";
      }
    }

    function getBestReview(reviews) {
      if (!reviews || reviews.length === 0) return null;
      return reviews.reduce((best, r) => r.rating > best.rating ? r : best, reviews[0]);
    }

    function getStarHTML(rating) {
      let stars = '';
      for (let i = 1; i <= 5; i++) {
        stars += i <= rating
          ? '<i class="fas fa-star star-small" style="color: gold;"></i>'
          : '<i class="far fa-star star-small" style="color: lightgray;"></i>';
      }
      return stars;
    }

    async function addToCart(productId) {
      try {
        const response = await fetch('/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, quantity: 1 })
        });

        const data = await response.json();
        if (data.success) {
          alert('Product added to cart!');
        } else {
          alert(data.message || 'Failed to add product to cart.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while adding the product to the cart.');
      }
    }

    function bindAddToCartButtons() {
      document.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', () => {
          const productId = button.getAttribute('data-product-id');
          addToCart(productId);
        });
      });
    }

    // First load
    filterProducts();
  });
</script>
<script>
  window.addEventListener('DOMContentLoaded', () => {
    fetch('/cart/count')
      .then(res => res.json())
      .then(data => {
        updateCartBadge(data.totalItems || 0);
      })
      .catch(err => {
        console.error('Error fetching cart count:', err);
      });
  });

  function updateCartBadge(count) {
    const cartCountElem = document.getElementById('cart-count');
    if (!cartCountElem) return; // safety check

    if (count > 0) {
      cartCountElem.textContent = count;
      cartCountElem.style.display = 'inline';
    } else {
      cartCountElem.style.display = 'none';
    }
  }
</script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <script src="app.js"></script>
    <script src="custom.js"></script>
    <script src="effects.js"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script src="google-signin.js"></script>
    <script src="facebook-signin.js"></script>
    <script
      async
      defer
      crossorigin="anonymous"
      src="https://connect.facebook.net/en_US/sdk.js"
    ></script>
  </body>
</html>
